// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: seqproxyapi/v1/seq_proxy_api.proto

package seqproxyapi

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Custom error code, returned by seq-db proxy.
type ErrorCode int32

const (
	ErrorCode_ERROR_CODE_UNSPECIFIED            ErrorCode = 0 // Unknown/undefined code.
	ErrorCode_ERROR_CODE_NO                     ErrorCode = 1 // No error code. Returned when there were no problems during the request handling.
	ErrorCode_ERROR_CODE_PARTIAL_RESPONSE       ErrorCode = 2 // Partial response code. Returned when some of the seq-stores returned an error.
	ErrorCode_ERROR_CODE_TOO_MANY_FRACTIONS_HIT ErrorCode = 3 // Too many fractions hit code. Returned when too many fractions were hit during search exceeded limit.
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0: "ERROR_CODE_UNSPECIFIED",
		1: "ERROR_CODE_NO",
		2: "ERROR_CODE_PARTIAL_RESPONSE",
		3: "ERROR_CODE_TOO_MANY_FRACTIONS_HIT",
	}
	ErrorCode_value = map[string]int32{
		"ERROR_CODE_UNSPECIFIED":            0,
		"ERROR_CODE_NO":                     1,
		"ERROR_CODE_PARTIAL_RESPONSE":       2,
		"ERROR_CODE_TOO_MANY_FRACTIONS_HIT": 3,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_seqproxyapi_v1_seq_proxy_api_proto_enumTypes[0].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_seqproxyapi_v1_seq_proxy_api_proto_enumTypes[0]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_seqproxyapi_v1_seq_proxy_api_proto_rawDescGZIP(), []int{0}
}

// Aggregation function used in request.
type AggFunc int32

const (
	AggFunc_AGG_FUNC_COUNT    AggFunc = 0 // Returns how many times `field` was equal to particular value.
	AggFunc_AGG_FUNC_SUM      AggFunc = 1 // Performs an addition operation on `field`, among documents with same `group_by` field.
	AggFunc_AGG_FUNC_MIN      AggFunc = 2 // Finds minimum value for `field`, among documents with same `group_by` field.
	AggFunc_AGG_FUNC_MAX      AggFunc = 3 // Finds maximum value for `field`, among documents with same `group_by` field.
	AggFunc_AGG_FUNC_AVG      AggFunc = 4 // Finds average value for `field`, among documents with same `group_by` field.
	AggFunc_AGG_FUNC_QUANTILE AggFunc = 5 // Finds quantiles for `field`, among documents with same `group_by` field.
	AggFunc_AGG_FUNC_UNIQUE   AggFunc = 6 // Finds unique values for `group_by` field.
)

// Enum value maps for AggFunc.
var (
	AggFunc_name = map[int32]string{
		0: "AGG_FUNC_COUNT",
		1: "AGG_FUNC_SUM",
		2: "AGG_FUNC_MIN",
		3: "AGG_FUNC_MAX",
		4: "AGG_FUNC_AVG",
		5: "AGG_FUNC_QUANTILE",
		6: "AGG_FUNC_UNIQUE",
	}
	AggFunc_value = map[string]int32{
		"AGG_FUNC_COUNT":    0,
		"AGG_FUNC_SUM":      1,
		"AGG_FUNC_MIN":      2,
		"AGG_FUNC_MAX":      3,
		"AGG_FUNC_AVG":      4,
		"AGG_FUNC_QUANTILE": 5,
		"AGG_FUNC_UNIQUE":   6,
	}
)

func (x AggFunc) Enum() *AggFunc {
	p := new(AggFunc)
	*p = x
	return p
}

func (x AggFunc) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AggFunc) Descriptor() protoreflect.EnumDescriptor {
	return file_seqproxyapi_v1_seq_proxy_api_proto_enumTypes[1].Descriptor()
}

func (AggFunc) Type() protoreflect.EnumType {
	return &file_seqproxyapi_v1_seq_proxy_api_proto_enumTypes[1]
}

func (x AggFunc) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AggFunc.Descriptor instead.
func (AggFunc) EnumDescriptor() ([]byte, []int) {
	return file_seqproxyapi_v1_seq_proxy_api_proto_rawDescGZIP(), []int{1}
}

// Order of document sorting.
type Order int32

const (
	Order_ORDER_DESC Order = 0 // Type for descending order.
	Order_ORDER_ASC  Order = 1 // Type for ascending order.
)

// Enum value maps for Order.
var (
	Order_name = map[int32]string{
		0: "ORDER_DESC",
		1: "ORDER_ASC",
	}
	Order_value = map[string]int32{
		"ORDER_DESC": 0,
		"ORDER_ASC":  1,
	}
)

func (x Order) Enum() *Order {
	p := new(Order)
	*p = x
	return p
}

func (x Order) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Order) Descriptor() protoreflect.EnumDescriptor {
	return file_seqproxyapi_v1_seq_proxy_api_proto_enumTypes[2].Descriptor()
}

func (Order) Type() protoreflect.EnumType {
	return &file_seqproxyapi_v1_seq_proxy_api_proto_enumTypes[2]
}

func (x Order) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Order.Descriptor instead.
func (Order) EnumDescriptor() ([]byte, []int) {
	return file_seqproxyapi_v1_seq_proxy_api_proto_rawDescGZIP(), []int{2}
}

type AsyncSearchStatus int32

const (
	// The asynchronous search is still in progress.
	// See the 'progress' field for completion percentage.
	AsyncSearchStatus_AsyncSearchStatusInProgress AsyncSearchStatus = 0
	// The asynchronous search completed successfully.
	AsyncSearchStatus_AsyncSearchStatusDone AsyncSearchStatus = 1
	// The asynchronous search was canceled, possibly via the CancelAsyncSearch handler.
	AsyncSearchStatus_AsyncSearchStatusCanceled AsyncSearchStatus = 2
	// The asynchronous search encountered errors in some shards.
	// See ComplexSearchResponse.Error for details.
	AsyncSearchStatus_AsyncSearchStatusError AsyncSearchStatus = 3
)

// Enum value maps for AsyncSearchStatus.
var (
	AsyncSearchStatus_name = map[int32]string{
		0: "AsyncSearchStatusInProgress",
		1: "AsyncSearchStatusDone",
		2: "AsyncSearchStatusCanceled",
		3: "AsyncSearchStatusError",
	}
	AsyncSearchStatus_value = map[string]int32{
		"AsyncSearchStatusInProgress": 0,
		"AsyncSearchStatusDone":       1,
		"AsyncSearchStatusCanceled":   2,
		"AsyncSearchStatusError":      3,
	}
)

func (x AsyncSearchStatus) Enum() *AsyncSearchStatus {
	p := new(AsyncSearchStatus)
	*p = x
	return p
}

func (x AsyncSearchStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AsyncSearchStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_seqproxyapi_v1_seq_proxy_api_proto_enumTypes[3].Descriptor()
}

func (AsyncSearchStatus) Type() protoreflect.EnumType {
	return &file_seqproxyapi_v1_seq_proxy_api_proto_enumTypes[3]
}

func (x AsyncSearchStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AsyncSearchStatus.Descriptor instead.
func (AsyncSearchStatus) EnumDescriptor() ([]byte, []int) {
	return file_seqproxyapi_v1_seq_proxy_api_proto_rawDescGZIP(), []int{3}
}

// Additional details provided if an error during request handling occurred.
type Error struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          ErrorCode              `protobuf:"varint,1,opt,name=code,proto3,enum=seqproxyapi.v1.ErrorCode" json:"code,omitempty"` // Response error code.
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                          // Additional message.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Error) Reset() {
	*x = Error{}
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_seqproxyapi_v1_seq_proxy_api_proto_rawDescGZIP(), []int{0}
}

func (x *Error) GetCode() ErrorCode {
	if x != nil {
		return x.Code
	}
	return ErrorCode_ERROR_CODE_UNSPECIFIED
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Document returned by seq-db.
type Document struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`     // seq-id of the document.
	Data          []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"` // content of the document in utf-8 format.
	Time          *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"` // timestamp from the document.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Document) Reset() {
	*x = Document{}
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Document) ProtoMessage() {}

func (x *Document) ProtoReflect() protoreflect.Message {
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Document.ProtoReflect.Descriptor instead.
func (*Document) Descriptor() ([]byte, []int) {
	return file_seqproxyapi_v1_seq_proxy_api_proto_rawDescGZIP(), []int{1}
}

func (x *Document) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Document) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Document) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

// Aggregation response.
type Aggregation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Buckets       []*Aggregation_Bucket  `protobuf:"bytes,1,rep,name=buckets,proto3" json:"buckets,omitempty"`                       // List of aggregations for given request.
	NotExists     int64                  `protobuf:"varint,2,opt,name=not_exists,json=notExists,proto3" json:"not_exists,omitempty"` // Number of documents in which such field does not exist
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Aggregation) Reset() {
	*x = Aggregation{}
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Aggregation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aggregation) ProtoMessage() {}

func (x *Aggregation) ProtoReflect() protoreflect.Message {
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aggregation.ProtoReflect.Descriptor instead.
func (*Aggregation) Descriptor() ([]byte, []int) {
	return file_seqproxyapi_v1_seq_proxy_api_proto_rawDescGZIP(), []int{2}
}

func (x *Aggregation) GetBuckets() []*Aggregation_Bucket {
	if x != nil {
		return x.Buckets
	}
	return nil
}

func (x *Aggregation) GetNotExists() int64 {
	if x != nil {
		return x.NotExists
	}
	return 0
}

// Histogram response.
type Histogram struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Buckets       []*Histogram_Bucket    `protobuf:"bytes,1,rep,name=buckets,proto3" json:"buckets,omitempty"` // Buckets for given histogram request.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Histogram) Reset() {
	*x = Histogram{}
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Histogram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Histogram) ProtoMessage() {}

func (x *Histogram) ProtoReflect() protoreflect.Message {
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Histogram.ProtoReflect.Descriptor instead.
func (*Histogram) Descriptor() ([]byte, []int) {
	return file_seqproxyapi_v1_seq_proxy_api_proto_rawDescGZIP(), []int{3}
}

func (x *Histogram) GetBuckets() []*Histogram_Bucket {
	if x != nil {
		return x.Buckets
	}
	return nil
}

// General search query for requesting documents.
type SearchQuery struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         string                 `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`      // Search query.
	From          *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`        // Lower bound for search (inclusive).
	To            *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`            // Upper bound for search (inclusive).
	Explain       bool                   `protobuf:"varint,4,opt,name=explain,proto3" json:"explain,omitempty"` // Should request be explained (tracing will be provided with the result).
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchQuery) Reset() {
	*x = SearchQuery{}
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuery) ProtoMessage() {}

func (x *SearchQuery) ProtoReflect() protoreflect.Message {
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuery.ProtoReflect.Descriptor instead.
func (*SearchQuery) Descriptor() ([]byte, []int) {
	return file_seqproxyapi_v1_seq_proxy_api_proto_rawDescGZIP(), []int{4}
}

func (x *SearchQuery) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchQuery) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *SearchQuery) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *SearchQuery) GetExplain() bool {
	if x != nil {
		return x.Explain
	}
	return false
}

// Aggregation query. Generally uses `field` and `group_by`, for details, refer to AggFunc definition.
type AggQuery struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Field         string                 `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`                            // Field over which aggregation function is used on.
	GroupBy       string                 `protobuf:"bytes,3,opt,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`         // Field over which to create group for further aggregation.
	Func          AggFunc                `protobuf:"varint,4,opt,name=func,proto3,enum=seqproxyapi.v1.AggFunc" json:"func,omitempty"` // Function to apply on aggregated field.
	Quantiles     []float64              `protobuf:"fixed64,5,rep,packed,name=quantiles,proto3" json:"quantiles,omitempty"`           // Field used only for `AGG_FUNC_QUANTILE`. Represents list of quantiles to calculate.
	Interval      *string                `protobuf:"bytes,6,opt,name=interval,proto3,oneof" json:"interval,omitempty"`                // Field used only for time series.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AggQuery) Reset() {
	*x = AggQuery{}
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AggQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggQuery) ProtoMessage() {}

func (x *AggQuery) ProtoReflect() protoreflect.Message {
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggQuery.ProtoReflect.Descriptor instead.
func (*AggQuery) Descriptor() ([]byte, []int) {
	return file_seqproxyapi_v1_seq_proxy_api_proto_rawDescGZIP(), []int{5}
}

func (x *AggQuery) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *AggQuery) GetGroupBy() string {
	if x != nil {
		return x.GroupBy
	}
	return ""
}

func (x *AggQuery) GetFunc() AggFunc {
	if x != nil {
		return x.Func
	}
	return AggFunc_AGG_FUNC_COUNT
}

func (x *AggQuery) GetQuantiles() []float64 {
	if x != nil {
		return x.Quantiles
	}
	return nil
}

func (x *AggQuery) GetInterval() string {
	if x != nil && x.Interval != nil {
		return *x.Interval
	}
	return ""
}

// Histogram query
type HistQuery struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Interval      string                 `protobuf:"bytes,1,opt,name=interval,proto3" json:"interval,omitempty"` // Interval in promql duration format like `1m`, `5s`. More details: https://prometheus.io/docs/prometheus/latest/querying/basics/#float-literals-and-time-durations
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HistQuery) Reset() {
	*x = HistQuery{}
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HistQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistQuery) ProtoMessage() {}

func (x *HistQuery) ProtoReflect() protoreflect.Message {
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistQuery.ProtoReflect.Descriptor instead.
func (*HistQuery) Descriptor() ([]byte, []int) {
	return file_seqproxyapi_v1_seq_proxy_api_proto_rawDescGZIP(), []int{6}
}

func (x *HistQuery) GetInterval() string {
	if x != nil {
		return x.Interval
	}
	return ""
}

// Explain info
type ExplainEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Duration      *durationpb.Duration   `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration,omitempty"`
	Children      []*ExplainEntry        `protobuf:"bytes,3,rep,name=children,proto3" json:"children,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExplainEntry) Reset() {
	*x = ExplainEntry{}
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExplainEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExplainEntry) ProtoMessage() {}

func (x *ExplainEntry) ProtoReflect() protoreflect.Message {
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExplainEntry.ProtoReflect.Descriptor instead.
func (*ExplainEntry) Descriptor() ([]byte, []int) {
	return file_seqproxyapi_v1_seq_proxy_api_proto_rawDescGZIP(), []int{7}
}

func (x *ExplainEntry) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ExplainEntry) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *ExplainEntry) GetChildren() []*ExplainEntry {
	if x != nil {
		return x.Children
	}
	return nil
}

type SearchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         *SearchQuery           `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`                            // Search query.
	Size          int64                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`                             // Maximum number of documents to return.
	Offset        int64                  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`                         // Search offset.
	WithTotal     bool                   `protobuf:"varint,4,opt,name=with_total,json=withTotal,proto3" json:"with_total,omitempty"`  // Should total number of documents be returned in response.
	Order         Order                  `protobuf:"varint,5,opt,name=order,proto3,enum=seqproxyapi.v1.Order" json:"order,omitempty"` // Document order ORDER_DESC/ORDER_ASC.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_seqproxyapi_v1_seq_proxy_api_proto_rawDescGZIP(), []int{8}
}

func (x *SearchRequest) GetQuery() *SearchQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *SearchRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *SearchRequest) GetWithTotal() bool {
	if x != nil {
		return x.WithTotal
	}
	return false
}

func (x *SearchRequest) GetOrder() Order {
	if x != nil {
		return x.Order
	}
	return Order_ORDER_DESC
}

type ComplexSearchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         *SearchQuery           `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`                            // Search query.
	Aggs          []*AggQuery            `protobuf:"bytes,2,rep,name=aggs,proto3" json:"aggs,omitempty"`                              // List of aggregation queries.
	Hist          *HistQuery             `protobuf:"bytes,3,opt,name=hist,proto3,oneof" json:"hist,omitempty"`                        // Histogram query.
	Size          int64                  `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`                             // Maximum number of documents to return.
	Offset        int64                  `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`                         // Search offset.
	WithTotal     bool                   `protobuf:"varint,6,opt,name=with_total,json=withTotal,proto3" json:"with_total,omitempty"`  // Should total number of documents be returned in response.
	Order         Order                  `protobuf:"varint,7,opt,name=order,proto3,enum=seqproxyapi.v1.Order" json:"order,omitempty"` // Document order ORDER_DESC/ORDER_ASC.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComplexSearchRequest) Reset() {
	*x = ComplexSearchRequest{}
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComplexSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplexSearchRequest) ProtoMessage() {}

func (x *ComplexSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplexSearchRequest.ProtoReflect.Descriptor instead.
func (*ComplexSearchRequest) Descriptor() ([]byte, []int) {
	return file_seqproxyapi_v1_seq_proxy_api_proto_rawDescGZIP(), []int{9}
}

func (x *ComplexSearchRequest) GetQuery() *SearchQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *ComplexSearchRequest) GetAggs() []*AggQuery {
	if x != nil {
		return x.Aggs
	}
	return nil
}

func (x *ComplexSearchRequest) GetHist() *HistQuery {
	if x != nil {
		return x.Hist
	}
	return nil
}

func (x *ComplexSearchRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ComplexSearchRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ComplexSearchRequest) GetWithTotal() bool {
	if x != nil {
		return x.WithTotal
	}
	return false
}

func (x *ComplexSearchRequest) GetOrder() Order {
	if x != nil {
		return x.Order
	}
	return Order_ORDER_DESC
}

type SearchResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in seqproxyapi/v1/seq_proxy_api.proto.
	PartialResponse bool        `protobuf:"varint,1,opt,name=partial_response,json=partialResponse,proto3" json:"partial_response,omitempty"` // True if some stores returned an error. Deprecated, use `Error` instead.
	Total           int64       `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`                                            // Total number of documents satisfying request. Returned if `with_total` field in request is `true`.
	Docs            []*Document `protobuf:"bytes,3,rep,name=docs,proto3" json:"docs,omitempty"`                                               // Documents, satisfying the request.
	Error           *Error      `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`                                             // Error if happened.
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SearchResponse) Reset() {
	*x = SearchResponse{}
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse) ProtoMessage() {}

func (x *SearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse.ProtoReflect.Descriptor instead.
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return file_seqproxyapi_v1_seq_proxy_api_proto_rawDescGZIP(), []int{10}
}

// Deprecated: Marked as deprecated in seqproxyapi/v1/seq_proxy_api.proto.
func (x *SearchResponse) GetPartialResponse() bool {
	if x != nil {
		return x.PartialResponse
	}
	return false
}

func (x *SearchResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchResponse) GetDocs() []*Document {
	if x != nil {
		return x.Docs
	}
	return nil
}

func (x *SearchResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type ComplexSearchResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in seqproxyapi/v1/seq_proxy_api.proto.
	PartialResponse bool           `protobuf:"varint,1,opt,name=partial_response,json=partialResponse,proto3" json:"partial_response,omitempty"` // True if some stores returned an error. Deprecated, use `Error` instead.
	Total           int64          `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`                                            // Total number of documents satisfying request. Returned if `with_total` field in request is `true`.
	Docs            []*Document    `protobuf:"bytes,3,rep,name=docs,proto3" json:"docs,omitempty"`                                               // Documents, satisfying the request.
	Aggs            []*Aggregation `protobuf:"bytes,4,rep,name=aggs,proto3" json:"aggs,omitempty"`                                               // Aggregation results.
	Hist            *Histogram     `protobuf:"bytes,5,opt,name=hist,proto3,oneof" json:"hist,omitempty"`                                         // Histogram results.
	Error           *Error         `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty"`                                             // Error if happened.
	Explain         *ExplainEntry  `protobuf:"bytes,7,opt,name=explain,proto3,oneof" json:"explain,omitempty"`                                   // Explain info.
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ComplexSearchResponse) Reset() {
	*x = ComplexSearchResponse{}
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComplexSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplexSearchResponse) ProtoMessage() {}

func (x *ComplexSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplexSearchResponse.ProtoReflect.Descriptor instead.
func (*ComplexSearchResponse) Descriptor() ([]byte, []int) {
	return file_seqproxyapi_v1_seq_proxy_api_proto_rawDescGZIP(), []int{11}
}

// Deprecated: Marked as deprecated in seqproxyapi/v1/seq_proxy_api.proto.
func (x *ComplexSearchResponse) GetPartialResponse() bool {
	if x != nil {
		return x.PartialResponse
	}
	return false
}

func (x *ComplexSearchResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ComplexSearchResponse) GetDocs() []*Document {
	if x != nil {
		return x.Docs
	}
	return nil
}

func (x *ComplexSearchResponse) GetAggs() []*Aggregation {
	if x != nil {
		return x.Aggs
	}
	return nil
}

func (x *ComplexSearchResponse) GetHist() *Histogram {
	if x != nil {
		return x.Hist
	}
	return nil
}

func (x *ComplexSearchResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ComplexSearchResponse) GetExplain() *ExplainEntry {
	if x != nil {
		return x.Explain
	}
	return nil
}

type StartAsyncSearchRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Duration to retain the result of an asynchronous query.
	// After this period, the result will be deleted.
	Retention *durationpb.Duration `protobuf:"bytes,1,opt,name=retention,proto3" json:"retention,omitempty"`
	// Search query to execute.
	Query *SearchQuery `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// List of aggregation queries.
	Aggs []*AggQuery `protobuf:"bytes,3,rep,name=aggs,proto3" json:"aggs,omitempty"`
	// Optional histogram query.
	Hist *HistQuery `protobuf:"bytes,4,opt,name=hist,proto3,oneof" json:"hist,omitempty"`
	// Set this to true to enable document retrieval via FetchAsyncSearch.
	// Note: enabling this may significantly increase disk space usage.
	WithDocs bool `protobuf:"varint,5,opt,name=with_docs,json=withDocs,proto3" json:"with_docs,omitempty"`
	// Maximum number of documents to find. Doesn't affect aggs and hist.
	// Ignored if with_docs was set to false.
	Size          int64 `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartAsyncSearchRequest) Reset() {
	*x = StartAsyncSearchRequest{}
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartAsyncSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartAsyncSearchRequest) ProtoMessage() {}

func (x *StartAsyncSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartAsyncSearchRequest.ProtoReflect.Descriptor instead.
func (*StartAsyncSearchRequest) Descriptor() ([]byte, []int) {
	return file_seqproxyapi_v1_seq_proxy_api_proto_rawDescGZIP(), []int{12}
}

func (x *StartAsyncSearchRequest) GetRetention() *durationpb.Duration {
	if x != nil {
		return x.Retention
	}
	return nil
}

func (x *StartAsyncSearchRequest) GetQuery() *SearchQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *StartAsyncSearchRequest) GetAggs() []*AggQuery {
	if x != nil {
		return x.Aggs
	}
	return nil
}

func (x *StartAsyncSearchRequest) GetHist() *HistQuery {
	if x != nil {
		return x.Hist
	}
	return nil
}

func (x *StartAsyncSearchRequest) GetWithDocs() bool {
	if x != nil {
		return x.WithDocs
	}
	return false
}

func (x *StartAsyncSearchRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type StartAsyncSearchResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique ID used to retrieve search results with FetchAsyncSearchResult.
	SearchId      string `protobuf:"bytes,1,opt,name=search_id,json=searchId,proto3" json:"search_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartAsyncSearchResponse) Reset() {
	*x = StartAsyncSearchResponse{}
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartAsyncSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartAsyncSearchResponse) ProtoMessage() {}

func (x *StartAsyncSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartAsyncSearchResponse.ProtoReflect.Descriptor instead.
func (*StartAsyncSearchResponse) Descriptor() ([]byte, []int) {
	return file_seqproxyapi_v1_seq_proxy_api_proto_rawDescGZIP(), []int{13}
}

func (x *StartAsyncSearchResponse) GetSearchId() string {
	if x != nil {
		return x.SearchId
	}
	return ""
}

type FetchAsyncSearchResultRequest struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	SearchId string                 `protobuf:"bytes,1,opt,name=search_id,json=searchId,proto3" json:"search_id,omitempty"`
	// Maximum number of documents to fetch (pagination).
	// Ignored if with_docs was set to false, since documents are not stored in that case.
	Size int32 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	// Document offset (pagination).
	// Ignored if with_docs was set to false, since documents are not stored in that case.
	Offset int32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	// Documents sort order.
	Order         Order `protobuf:"varint,4,opt,name=order,proto3,enum=seqproxyapi.v1.Order" json:"order,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchAsyncSearchResultRequest) Reset() {
	*x = FetchAsyncSearchResultRequest{}
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchAsyncSearchResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchAsyncSearchResultRequest) ProtoMessage() {}

func (x *FetchAsyncSearchResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchAsyncSearchResultRequest.ProtoReflect.Descriptor instead.
func (*FetchAsyncSearchResultRequest) Descriptor() ([]byte, []int) {
	return file_seqproxyapi_v1_seq_proxy_api_proto_rawDescGZIP(), []int{14}
}

func (x *FetchAsyncSearchResultRequest) GetSearchId() string {
	if x != nil {
		return x.SearchId
	}
	return ""
}

func (x *FetchAsyncSearchResultRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FetchAsyncSearchResultRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *FetchAsyncSearchResultRequest) GetOrder() Order {
	if x != nil {
		return x.Order
	}
	return Order_ORDER_DESC
}

type FetchAsyncSearchResultResponse struct {
	state      protoimpl.MessageState   `protogen:"open.v1"`
	Status     AsyncSearchStatus        `protobuf:"varint,1,opt,name=status,proto3,enum=seqproxyapi.v1.AsyncSearchStatus" json:"status,omitempty"`
	Request    *StartAsyncSearchRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	Response   *ComplexSearchResponse   `protobuf:"bytes,3,opt,name=response,proto3" json:"response,omitempty"`
	StartedAt  *timestamppb.Timestamp   `protobuf:"bytes,4,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	ExpiresAt  *timestamppb.Timestamp   `protobuf:"bytes,5,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	CanceledAt *timestamppb.Timestamp   `protobuf:"bytes,6,opt,name=canceled_at,json=canceledAt,proto3,oneof" json:"canceled_at,omitempty"`
	// Search progress in range [0, 1].
	Progress float64 `protobuf:"fixed64,7,opt,name=progress,proto3" json:"progress,omitempty"`
	// The size of data stored on disk, in bytes.
	DiskUsage     uint64 `protobuf:"varint,8,opt,name=disk_usage,json=diskUsage,proto3" json:"disk_usage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchAsyncSearchResultResponse) Reset() {
	*x = FetchAsyncSearchResultResponse{}
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchAsyncSearchResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchAsyncSearchResultResponse) ProtoMessage() {}

func (x *FetchAsyncSearchResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchAsyncSearchResultResponse.ProtoReflect.Descriptor instead.
func (*FetchAsyncSearchResultResponse) Descriptor() ([]byte, []int) {
	return file_seqproxyapi_v1_seq_proxy_api_proto_rawDescGZIP(), []int{15}
}

func (x *FetchAsyncSearchResultResponse) GetStatus() AsyncSearchStatus {
	if x != nil {
		return x.Status
	}
	return AsyncSearchStatus_AsyncSearchStatusInProgress
}

func (x *FetchAsyncSearchResultResponse) GetRequest() *StartAsyncSearchRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *FetchAsyncSearchResultResponse) GetResponse() *ComplexSearchResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *FetchAsyncSearchResultResponse) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *FetchAsyncSearchResultResponse) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *FetchAsyncSearchResultResponse) GetCanceledAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CanceledAt
	}
	return nil
}

func (x *FetchAsyncSearchResultResponse) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *FetchAsyncSearchResultResponse) GetDiskUsage() uint64 {
	if x != nil {
		return x.DiskUsage
	}
	return 0
}

type CancelAsyncSearchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SearchId      string                 `protobuf:"bytes,1,opt,name=search_id,json=searchId,proto3" json:"search_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelAsyncSearchRequest) Reset() {
	*x = CancelAsyncSearchRequest{}
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelAsyncSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelAsyncSearchRequest) ProtoMessage() {}

func (x *CancelAsyncSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelAsyncSearchRequest.ProtoReflect.Descriptor instead.
func (*CancelAsyncSearchRequest) Descriptor() ([]byte, []int) {
	return file_seqproxyapi_v1_seq_proxy_api_proto_rawDescGZIP(), []int{16}
}

func (x *CancelAsyncSearchRequest) GetSearchId() string {
	if x != nil {
		return x.SearchId
	}
	return ""
}

type CancelAsyncSearchResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelAsyncSearchResponse) Reset() {
	*x = CancelAsyncSearchResponse{}
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelAsyncSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelAsyncSearchResponse) ProtoMessage() {}

func (x *CancelAsyncSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelAsyncSearchResponse.ProtoReflect.Descriptor instead.
func (*CancelAsyncSearchResponse) Descriptor() ([]byte, []int) {
	return file_seqproxyapi_v1_seq_proxy_api_proto_rawDescGZIP(), []int{17}
}

type DeleteAsyncSearchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SearchId      string                 `protobuf:"bytes,1,opt,name=search_id,json=searchId,proto3" json:"search_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAsyncSearchRequest) Reset() {
	*x = DeleteAsyncSearchRequest{}
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAsyncSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAsyncSearchRequest) ProtoMessage() {}

func (x *DeleteAsyncSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAsyncSearchRequest.ProtoReflect.Descriptor instead.
func (*DeleteAsyncSearchRequest) Descriptor() ([]byte, []int) {
	return file_seqproxyapi_v1_seq_proxy_api_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteAsyncSearchRequest) GetSearchId() string {
	if x != nil {
		return x.SearchId
	}
	return ""
}

type DeleteAsyncSearchResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAsyncSearchResponse) Reset() {
	*x = DeleteAsyncSearchResponse{}
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAsyncSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAsyncSearchResponse) ProtoMessage() {}

func (x *DeleteAsyncSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAsyncSearchResponse.ProtoReflect.Descriptor instead.
func (*DeleteAsyncSearchResponse) Descriptor() ([]byte, []int) {
	return file_seqproxyapi_v1_seq_proxy_api_proto_rawDescGZIP(), []int{19}
}

type GetAsyncSearchesListRequest struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Status *AsyncSearchStatus     `protobuf:"varint,1,opt,name=status,proto3,enum=seqproxyapi.v1.AsyncSearchStatus,oneof" json:"status,omitempty"`
	// Maximum number of searches to fetch (pagination).
	Size int32 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	// Searches offset (pagination).
	Offset int32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	// list of async search ids to filter out result
	Ids           []string `protobuf:"bytes,4,rep,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAsyncSearchesListRequest) Reset() {
	*x = GetAsyncSearchesListRequest{}
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAsyncSearchesListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAsyncSearchesListRequest) ProtoMessage() {}

func (x *GetAsyncSearchesListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAsyncSearchesListRequest.ProtoReflect.Descriptor instead.
func (*GetAsyncSearchesListRequest) Descriptor() ([]byte, []int) {
	return file_seqproxyapi_v1_seq_proxy_api_proto_rawDescGZIP(), []int{20}
}

func (x *GetAsyncSearchesListRequest) GetStatus() AsyncSearchStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return AsyncSearchStatus_AsyncSearchStatusInProgress
}

func (x *GetAsyncSearchesListRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetAsyncSearchesListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetAsyncSearchesListRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type GetAsyncSearchesListResponse struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Searches      []*AsyncSearchesListItem `protobuf:"bytes,1,rep,name=searches,proto3" json:"searches,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAsyncSearchesListResponse) Reset() {
	*x = GetAsyncSearchesListResponse{}
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAsyncSearchesListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAsyncSearchesListResponse) ProtoMessage() {}

func (x *GetAsyncSearchesListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAsyncSearchesListResponse.ProtoReflect.Descriptor instead.
func (*GetAsyncSearchesListResponse) Descriptor() ([]byte, []int) {
	return file_seqproxyapi_v1_seq_proxy_api_proto_rawDescGZIP(), []int{21}
}

func (x *GetAsyncSearchesListResponse) GetSearches() []*AsyncSearchesListItem {
	if x != nil {
		return x.Searches
	}
	return nil
}

type AsyncSearchesListItem struct {
	state      protoimpl.MessageState   `protogen:"open.v1"`
	SearchId   string                   `protobuf:"bytes,1,opt,name=search_id,json=searchId,proto3" json:"search_id,omitempty"`
	Status     AsyncSearchStatus        `protobuf:"varint,2,opt,name=status,proto3,enum=seqproxyapi.v1.AsyncSearchStatus" json:"status,omitempty"`
	Request    *StartAsyncSearchRequest `protobuf:"bytes,3,opt,name=request,proto3" json:"request,omitempty"`
	StartedAt  *timestamppb.Timestamp   `protobuf:"bytes,4,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	ExpiresAt  *timestamppb.Timestamp   `protobuf:"bytes,5,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	CanceledAt *timestamppb.Timestamp   `protobuf:"bytes,6,opt,name=canceled_at,json=canceledAt,proto3,oneof" json:"canceled_at,omitempty"`
	// Search progress in range [0, 1].
	Progress float64 `protobuf:"fixed64,7,opt,name=progress,proto3" json:"progress,omitempty"`
	// The size of data stored on disk, in bytes.
	DiskUsage     uint64 `protobuf:"varint,8,opt,name=disk_usage,json=diskUsage,proto3" json:"disk_usage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AsyncSearchesListItem) Reset() {
	*x = AsyncSearchesListItem{}
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AsyncSearchesListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsyncSearchesListItem) ProtoMessage() {}

func (x *AsyncSearchesListItem) ProtoReflect() protoreflect.Message {
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsyncSearchesListItem.ProtoReflect.Descriptor instead.
func (*AsyncSearchesListItem) Descriptor() ([]byte, []int) {
	return file_seqproxyapi_v1_seq_proxy_api_proto_rawDescGZIP(), []int{22}
}

func (x *AsyncSearchesListItem) GetSearchId() string {
	if x != nil {
		return x.SearchId
	}
	return ""
}

func (x *AsyncSearchesListItem) GetStatus() AsyncSearchStatus {
	if x != nil {
		return x.Status
	}
	return AsyncSearchStatus_AsyncSearchStatusInProgress
}

func (x *AsyncSearchesListItem) GetRequest() *StartAsyncSearchRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *AsyncSearchesListItem) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *AsyncSearchesListItem) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *AsyncSearchesListItem) GetCanceledAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CanceledAt
	}
	return nil
}

func (x *AsyncSearchesListItem) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *AsyncSearchesListItem) GetDiskUsage() uint64 {
	if x != nil {
		return x.DiskUsage
	}
	return 0
}

type GetAggregationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         *SearchQuery           `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"` // Search query.
	Aggs          []*AggQuery            `protobuf:"bytes,2,rep,name=aggs,proto3" json:"aggs,omitempty"`   // List of aggregation queries.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAggregationRequest) Reset() {
	*x = GetAggregationRequest{}
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAggregationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAggregationRequest) ProtoMessage() {}

func (x *GetAggregationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAggregationRequest.ProtoReflect.Descriptor instead.
func (*GetAggregationRequest) Descriptor() ([]byte, []int) {
	return file_seqproxyapi_v1_seq_proxy_api_proto_rawDescGZIP(), []int{23}
}

func (x *GetAggregationRequest) GetQuery() *SearchQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *GetAggregationRequest) GetAggs() []*AggQuery {
	if x != nil {
		return x.Aggs
	}
	return nil
}

type GetAggregationResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in seqproxyapi/v1/seq_proxy_api.proto.
	PartialResponse bool           `protobuf:"varint,1,opt,name=partial_response,json=partialResponse,proto3" json:"partial_response,omitempty"` // True if some stores returned an error. Deprecated, use `Error` instead.
	Total           int64          `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`                                            // Total number of documents satisfying request. Returned if `with_total` field in request is `true`.
	Aggs            []*Aggregation `protobuf:"bytes,3,rep,name=aggs,proto3" json:"aggs,omitempty"`                                               // Aggregation results.
	Error           *Error         `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`                                             // Error if happened.
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetAggregationResponse) Reset() {
	*x = GetAggregationResponse{}
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAggregationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAggregationResponse) ProtoMessage() {}

func (x *GetAggregationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAggregationResponse.ProtoReflect.Descriptor instead.
func (*GetAggregationResponse) Descriptor() ([]byte, []int) {
	return file_seqproxyapi_v1_seq_proxy_api_proto_rawDescGZIP(), []int{24}
}

// Deprecated: Marked as deprecated in seqproxyapi/v1/seq_proxy_api.proto.
func (x *GetAggregationResponse) GetPartialResponse() bool {
	if x != nil {
		return x.PartialResponse
	}
	return false
}

func (x *GetAggregationResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetAggregationResponse) GetAggs() []*Aggregation {
	if x != nil {
		return x.Aggs
	}
	return nil
}

func (x *GetAggregationResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetHistogramRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         *SearchQuery           `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"` // Search query.
	Hist          *HistQuery             `protobuf:"bytes,2,opt,name=hist,proto3" json:"hist,omitempty"`   // Histogram query.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHistogramRequest) Reset() {
	*x = GetHistogramRequest{}
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHistogramRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHistogramRequest) ProtoMessage() {}

func (x *GetHistogramRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHistogramRequest.ProtoReflect.Descriptor instead.
func (*GetHistogramRequest) Descriptor() ([]byte, []int) {
	return file_seqproxyapi_v1_seq_proxy_api_proto_rawDescGZIP(), []int{25}
}

func (x *GetHistogramRequest) GetQuery() *SearchQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *GetHistogramRequest) GetHist() *HistQuery {
	if x != nil {
		return x.Hist
	}
	return nil
}

type GetHistogramResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in seqproxyapi/v1/seq_proxy_api.proto.
	PartialResponse bool       `protobuf:"varint,1,opt,name=partial_response,json=partialResponse,proto3" json:"partial_response,omitempty"` // True if some stores returned an error. Deprecated, use `Error` instead.
	Total           int64      `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`                                            // Total number of documents satisfying request. Returned if `with_total` field in request is `true`.
	Hist            *Histogram `protobuf:"bytes,3,opt,name=hist,proto3" json:"hist,omitempty"`                                               // Histogram results.
	Error           *Error     `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`                                             // Error if happened.
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetHistogramResponse) Reset() {
	*x = GetHistogramResponse{}
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHistogramResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHistogramResponse) ProtoMessage() {}

func (x *GetHistogramResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHistogramResponse.ProtoReflect.Descriptor instead.
func (*GetHistogramResponse) Descriptor() ([]byte, []int) {
	return file_seqproxyapi_v1_seq_proxy_api_proto_rawDescGZIP(), []int{26}
}

// Deprecated: Marked as deprecated in seqproxyapi/v1/seq_proxy_api.proto.
func (x *GetHistogramResponse) GetPartialResponse() bool {
	if x != nil {
		return x.PartialResponse
	}
	return false
}

func (x *GetHistogramResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetHistogramResponse) GetHist() *Histogram {
	if x != nil {
		return x.Hist
	}
	return nil
}

func (x *GetHistogramResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type FetchRequest struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Ids           []string                   `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"` // Document ids to fetch.
	FieldsFilter  *FetchRequest_FieldsFilter `protobuf:"bytes,2,opt,name=fields_filter,json=fieldsFilter,proto3" json:"fields_filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchRequest) Reset() {
	*x = FetchRequest{}
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchRequest) ProtoMessage() {}

func (x *FetchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchRequest.ProtoReflect.Descriptor instead.
func (*FetchRequest) Descriptor() ([]byte, []int) {
	return file_seqproxyapi_v1_seq_proxy_api_proto_rawDescGZIP(), []int{27}
}

func (x *FetchRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *FetchRequest) GetFieldsFilter() *FetchRequest_FieldsFilter {
	if x != nil {
		return x.FieldsFilter
	}
	return nil
}

type MappingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MappingRequest) Reset() {
	*x = MappingRequest{}
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MappingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MappingRequest) ProtoMessage() {}

func (x *MappingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MappingRequest.ProtoReflect.Descriptor instead.
func (*MappingRequest) Descriptor() ([]byte, []int) {
	return file_seqproxyapi_v1_seq_proxy_api_proto_rawDescGZIP(), []int{28}
}

type MappingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` // utf-8 encoded mapping info.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MappingResponse) Reset() {
	*x = MappingResponse{}
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MappingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MappingResponse) ProtoMessage() {}

func (x *MappingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MappingResponse.ProtoReflect.Descriptor instead.
func (*MappingResponse) Descriptor() ([]byte, []int) {
	return file_seqproxyapi_v1_seq_proxy_api_proto_rawDescGZIP(), []int{29}
}

func (x *MappingResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type StatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatusRequest) Reset() {
	*x = StatusRequest{}
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusRequest) ProtoMessage() {}

func (x *StatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusRequest.ProtoReflect.Descriptor instead.
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return file_seqproxyapi_v1_seq_proxy_api_proto_rawDescGZIP(), []int{30}
}

type StatusResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	NumberOfStores    int32                  `protobuf:"varint,1,opt,name=number_of_stores,json=numberOfStores,proto3" json:"number_of_stores,omitempty"`               // Total number of stores.
	OldestStorageTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=oldest_storage_time,json=oldestStorageTime,proto3,oneof" json:"oldest_storage_time,omitempty"` // Timestamp of the oldest stored document across all stores.
	Stores            []*StoreStatus         `protobuf:"bytes,4,rep,name=stores,proto3" json:"stores,omitempty"`                                                        // Detailed information about each store.
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_seqproxyapi_v1_seq_proxy_api_proto_rawDescGZIP(), []int{31}
}

func (x *StatusResponse) GetNumberOfStores() int32 {
	if x != nil {
		return x.NumberOfStores
	}
	return 0
}

func (x *StatusResponse) GetOldestStorageTime() *timestamppb.Timestamp {
	if x != nil {
		return x.OldestStorageTime
	}
	return nil
}

func (x *StatusResponse) GetStores() []*StoreStatus {
	if x != nil {
		return x.Stores
	}
	return nil
}

type StoreStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Host          string                 `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`           // Store's IP-address.
	Values        *StoreStatusValues     `protobuf:"bytes,2,opt,name=values,proto3,oneof" json:"values,omitempty"` // Store's status information.
	Error         *string                `protobuf:"bytes,3,opt,name=error,proto3,oneof" json:"error,omitempty"`   // Error during the request.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StoreStatus) Reset() {
	*x = StoreStatus{}
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoreStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreStatus) ProtoMessage() {}

func (x *StoreStatus) ProtoReflect() protoreflect.Message {
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreStatus.ProtoReflect.Descriptor instead.
func (*StoreStatus) Descriptor() ([]byte, []int) {
	return file_seqproxyapi_v1_seq_proxy_api_proto_rawDescGZIP(), []int{32}
}

func (x *StoreStatus) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *StoreStatus) GetValues() *StoreStatusValues {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *StoreStatus) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type StoreStatusValues struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OldestTime    *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=oldest_time,json=oldestTime,proto3" json:"oldest_time,omitempty"` // Timestamp of the oldest stored document.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StoreStatusValues) Reset() {
	*x = StoreStatusValues{}
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoreStatusValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreStatusValues) ProtoMessage() {}

func (x *StoreStatusValues) ProtoReflect() protoreflect.Message {
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreStatusValues.ProtoReflect.Descriptor instead.
func (*StoreStatusValues) Descriptor() ([]byte, []int) {
	return file_seqproxyapi_v1_seq_proxy_api_proto_rawDescGZIP(), []int{33}
}

func (x *StoreStatusValues) GetOldestTime() *timestamppb.Timestamp {
	if x != nil {
		return x.OldestTime
	}
	return nil
}

type ExportRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         *SearchQuery           `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`    // Search query.
	Size          int64                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`     // Maximum number of documents to return.
	Offset        int64                  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"` // Search offset.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExportRequest) Reset() {
	*x = ExportRequest{}
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportRequest) ProtoMessage() {}

func (x *ExportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportRequest.ProtoReflect.Descriptor instead.
func (*ExportRequest) Descriptor() ([]byte, []int) {
	return file_seqproxyapi_v1_seq_proxy_api_proto_rawDescGZIP(), []int{34}
}

func (x *ExportRequest) GetQuery() *SearchQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *ExportRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ExportRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type ExportResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Doc           *Document              `protobuf:"bytes,1,opt,name=doc,proto3" json:"doc,omitempty"` // Response document.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExportResponse) Reset() {
	*x = ExportResponse{}
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportResponse) ProtoMessage() {}

func (x *ExportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportResponse.ProtoReflect.Descriptor instead.
func (*ExportResponse) Descriptor() ([]byte, []int) {
	return file_seqproxyapi_v1_seq_proxy_api_proto_rawDescGZIP(), []int{35}
}

func (x *ExportResponse) GetDoc() *Document {
	if x != nil {
		return x.Doc
	}
	return nil
}

// Key-value pair containing result of single aggregation.
type Aggregation_Bucket struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`                               // Field name.
	Value         float64                `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`                         // Calculated aggregation value.
	NotExists     int64                  `protobuf:"varint,4,opt,name=not_exists,json=notExists,proto3" json:"not_exists,omitempty"` // Number of documents without presence of that field.
	Quantiles     []float64              `protobuf:"fixed64,5,rep,packed,name=quantiles,proto3" json:"quantiles,omitempty"`          // Value of quantiles for given request. Returned when quantiles aggregation func used.
	Ts            *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=ts,proto3,oneof" json:"ts,omitempty"`                           // Will be used to determine bin of time series.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Aggregation_Bucket) Reset() {
	*x = Aggregation_Bucket{}
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Aggregation_Bucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aggregation_Bucket) ProtoMessage() {}

func (x *Aggregation_Bucket) ProtoReflect() protoreflect.Message {
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aggregation_Bucket.ProtoReflect.Descriptor instead.
func (*Aggregation_Bucket) Descriptor() ([]byte, []int) {
	return file_seqproxyapi_v1_seq_proxy_api_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Aggregation_Bucket) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Aggregation_Bucket) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Aggregation_Bucket) GetNotExists() int64 {
	if x != nil {
		return x.NotExists
	}
	return 0
}

func (x *Aggregation_Bucket) GetQuantiles() []float64 {
	if x != nil {
		return x.Quantiles
	}
	return nil
}

func (x *Aggregation_Bucket) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

// Key-value pair with time as a key and number of documents in this bucket as a value.
type Histogram_Bucket struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DocCount      uint64                 `protobuf:"varint,1,opt,name=doc_count,json=docCount,proto3" json:"doc_count,omitempty"` // Number of documents in bucket.
	Ts            *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=ts,proto3" json:"ts,omitempty"`                              // Left border of the bucket.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Histogram_Bucket) Reset() {
	*x = Histogram_Bucket{}
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Histogram_Bucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Histogram_Bucket) ProtoMessage() {}

func (x *Histogram_Bucket) ProtoReflect() protoreflect.Message {
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Histogram_Bucket.ProtoReflect.Descriptor instead.
func (*Histogram_Bucket) Descriptor() ([]byte, []int) {
	return file_seqproxyapi_v1_seq_proxy_api_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Histogram_Bucket) GetDocCount() uint64 {
	if x != nil {
		return x.DocCount
	}
	return 0
}

func (x *Histogram_Bucket) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

type FetchRequest_FieldsFilter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// list of fields to include or exclude, see allow_list flag for details.
	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	// allow_list means how to process 'fields' list:
	// true - remove all fields except the fields from the list,
	// false - remove given fields from documents.
	// Currently it works only with top-level fields, not with nested.
	AllowList     bool `protobuf:"varint,2,opt,name=allow_list,json=allowList,proto3" json:"allow_list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchRequest_FieldsFilter) Reset() {
	*x = FetchRequest_FieldsFilter{}
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchRequest_FieldsFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchRequest_FieldsFilter) ProtoMessage() {}

func (x *FetchRequest_FieldsFilter) ProtoReflect() protoreflect.Message {
	mi := &file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchRequest_FieldsFilter.ProtoReflect.Descriptor instead.
func (*FetchRequest_FieldsFilter) Descriptor() ([]byte, []int) {
	return file_seqproxyapi_v1_seq_proxy_api_proto_rawDescGZIP(), []int{27, 0}
}

func (x *FetchRequest_FieldsFilter) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *FetchRequest_FieldsFilter) GetAllowList() bool {
	if x != nil {
		return x.AllowList
	}
	return false
}

var File_seqproxyapi_v1_seq_proxy_api_proto protoreflect.FileDescriptor

var file_seqproxyapi_v1_seq_proxy_api_proto_rawDesc = string([]byte{
	0x0a, 0x22, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x65, 0x71, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x50, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x71,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5e, 0x0a, 0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x98, 0x02, 0x0a, 0x0b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x1a, 0xab, 0x01, 0x0a, 0x06, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x01, 0x52, 0x09, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x6c,
	0x65, 0x73, 0x12, 0x2f, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x02, 0x74, 0x73,
	0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x74, 0x73, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02,
	0x22, 0x9a, 0x01, 0x0a, 0x09, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x3a,
	0x0a, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x1a, 0x51, 0x0a, 0x06, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x22, 0x99, 0x01,
	0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x6f, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x22, 0xba, 0x01, 0x0a, 0x08, 0x41, 0x67,
	0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x2b, 0x0a, 0x04, 0x66, 0x75, 0x6e, 0x63, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x52, 0x04,
	0x66, 0x75, 0x6e, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x01, 0x52, 0x09, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x6c,
	0x65, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x27, 0x0a, 0x09, 0x48, 0x69, 0x73, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22,
	0x99, 0x01, 0x0a, 0x0c, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x38, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0xba, 0x01, 0x0a, 0x0d,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73,
	0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x77, 0x69, 0x74, 0x68, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x71,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xac, 0x02, 0x0a, 0x14, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x78, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x31, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x04, 0x61, 0x67, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x04, 0x61, 0x67,
	0x67, 0x73, 0x12, 0x32, 0x0a, 0x04, 0x68, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x04, 0x68,
	0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x77, 0x69, 0x74, 0x68, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x2b, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x22, 0xb0, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x10, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x2c, 0x0a, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x12, 0x2b, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73,
	0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xee, 0x02, 0x0a, 0x15, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x6f, 0x63,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x12, 0x2f, 0x0a, 0x04, 0x61, 0x67, 0x67, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x04, 0x61, 0x67, 0x67, 0x73, 0x12, 0x32, 0x0a, 0x04, 0x68, 0x69, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x48, 0x00, 0x52, 0x04, 0x68, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65,
	0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x07, 0x65, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x71,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x01, 0x52, 0x07, 0x65, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x22, 0xa1, 0x02, 0x0a, 0x17,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x31, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x04, 0x61, 0x67, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x04, 0x61, 0x67, 0x67,
	0x73, 0x12, 0x32, 0x0a, 0x04, 0x68, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x04, 0x68, 0x69,
	0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x6f,
	0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x77, 0x69, 0x74, 0x68, 0x44, 0x6f,
	0x63, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x22,
	0x37, 0x0a, 0x18, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x64, 0x22, 0x95, 0x01, 0x0a, 0x1d, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x22, 0xe4, 0x03, 0x0a, 0x1e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x41, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0a, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x6b,
	0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x64, 0x69,
	0x73, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0x37, 0x0a, 0x18, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x64,
	0x22, 0x1b, 0x0a, 0x19, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x0a,
	0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x49, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x73, 0x79, 0x6e, 0x63,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64,
	0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x61, 0x0a, 0x1c,
	0x47, 0x65, 0x74, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x08,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x22,
	0xb5, 0x03, 0x0a, 0x15, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x41, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0a, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x6b,
	0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x64, 0x69,
	0x73, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0x78, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x31, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x04, 0x61, 0x67, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x04, 0x61, 0x67, 0x67,
	0x73, 0x22, 0xbb, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x10,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x2f, 0x0a, 0x04, 0x61, 0x67, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x61, 0x67,
	0x67, 0x73, 0x12, 0x2b, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x77, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x04, 0x68, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x04, 0x68, 0x69, 0x73, 0x74, 0x22, 0xb7, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2d, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x04, 0x68, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52,
	0x04, 0x68, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0xb7, 0x01, 0x0a, 0x0c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x4e, 0x0a, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x45, 0x0a, 0x0c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x10, 0x0a, 0x0e,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x25,
	0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x0f, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xd8, 0x01, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x13, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x11,
	0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6f, 0x6c,
	0x64, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x91, 0x01, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x48, 0x00, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x50, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x6f, 0x6c,
	0x64, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6f, 0x6c, 0x64,
	0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x6e, 0x0a, 0x0d, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x3c, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x03, 0x64, 0x6f, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x03, 0x64, 0x6f, 0x63, 0x2a, 0x82, 0x01, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f,
	0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x46, 0x52, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x48, 0x49, 0x54, 0x10, 0x03, 0x2a, 0x91, 0x01, 0x0a, 0x07, 0x41,
	0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x47, 0x47, 0x5f, 0x46, 0x55,
	0x4e, 0x43, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x47,
	0x47, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x53, 0x55, 0x4d, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c,
	0x41, 0x47, 0x47, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x10,
	0x0a, 0x0c, 0x41, 0x47, 0x47, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03,
	0x12, 0x10, 0x0a, 0x0c, 0x41, 0x47, 0x47, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x41, 0x56, 0x47,
	0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x47, 0x47, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x51,
	0x55, 0x41, 0x4e, 0x54, 0x49, 0x4c, 0x45, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x47, 0x47,
	0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x55, 0x4e, 0x49, 0x51, 0x55, 0x45, 0x10, 0x06, 0x2a, 0x26,
	0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x44, 0x45, 0x53, 0x43, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x41, 0x53, 0x43, 0x10, 0x01, 0x2a, 0x8a, 0x01, 0x0a, 0x11, 0x41, 0x73, 0x79, 0x6e, 0x63,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x1b,
	0x41, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x19, 0x0a,
	0x15, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x73, 0x79, 0x6e,
	0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x73, 0x79, 0x6e, 0x63,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x10, 0x03, 0x32, 0x98, 0x0c, 0x0a, 0x0b, 0x53, 0x65, 0x71, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x41, 0x70, 0x69, 0x12, 0x5b, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1d, 0x2e,
	0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73,
	0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x12, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0c, 0x3a, 0x01, 0x2a, 0x22, 0x07, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x78, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x12, 0x24, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x78, 0x2d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x76, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x73,
	0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x0f, 0x3a, 0x01, 0x2a, 0x22, 0x0a, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x12, 0x70, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x12, 0x23, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x3a, 0x01, 0x2a, 0x22, 0x0a, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x12, 0x54, 0x0a, 0x05, 0x46, 0x65, 0x74, 0x63, 0x68, 0x12, 0x1c, 0x2e,
	0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x65,
	0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x11, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x3a, 0x01, 0x2a,
	0x22, 0x06, 0x2f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x30, 0x01, 0x12, 0x5d, 0x0a, 0x07, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x11, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x12, 0x09,
	0x2f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x58, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1d, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x0f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x5d, 0x0a, 0x06, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x2e,
	0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73,
	0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x12, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0c, 0x3a, 0x01, 0x2a, 0x22, 0x07, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x30, 0x01, 0x12, 0x81, 0x01, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x73, 0x79, 0x6e,
	0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x27, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x73,
	0x79, 0x6e, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x14, 0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x2d, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x16, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x41, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x2d, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2e, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f, 0x61, 0x73,
	0x79, 0x6e, 0x63, 0x2d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x12, 0x94, 0x01, 0x0a, 0x11, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x73, 0x79,
	0x6e, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x28, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x41, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x22, 0x2f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x2d, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x8d, 0x01, 0x0a, 0x11, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x28, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x65, 0x71, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x2a, 0x1b, 0x2f, 0x61,
	0x73, 0x79, 0x6e, 0x63, 0x2d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x7b, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x92, 0x01, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2b, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x61, 0x73, 0x79, 0x6e, 0x63,
	0x2d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x3b,
	0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x7a, 0x6f,
	0x6e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x73, 0x65, 0x71, 0x2d, 0x64, 0x62, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x3b,
	0x73, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_seqproxyapi_v1_seq_proxy_api_proto_rawDescOnce sync.Once
	file_seqproxyapi_v1_seq_proxy_api_proto_rawDescData []byte
)

func file_seqproxyapi_v1_seq_proxy_api_proto_rawDescGZIP() []byte {
	file_seqproxyapi_v1_seq_proxy_api_proto_rawDescOnce.Do(func() {
		file_seqproxyapi_v1_seq_proxy_api_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_seqproxyapi_v1_seq_proxy_api_proto_rawDesc), len(file_seqproxyapi_v1_seq_proxy_api_proto_rawDesc)))
	})
	return file_seqproxyapi_v1_seq_proxy_api_proto_rawDescData
}

var file_seqproxyapi_v1_seq_proxy_api_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_seqproxyapi_v1_seq_proxy_api_proto_goTypes = []any{
	(ErrorCode)(0),                         // 0: seqproxyapi.v1.ErrorCode
	(AggFunc)(0),                           // 1: seqproxyapi.v1.AggFunc
	(Order)(0),                             // 2: seqproxyapi.v1.Order
	(AsyncSearchStatus)(0),                 // 3: seqproxyapi.v1.AsyncSearchStatus
	(*Error)(nil),                          // 4: seqproxyapi.v1.Error
	(*Document)(nil),                       // 5: seqproxyapi.v1.Document
	(*Aggregation)(nil),                    // 6: seqproxyapi.v1.Aggregation
	(*Histogram)(nil),                      // 7: seqproxyapi.v1.Histogram
	(*SearchQuery)(nil),                    // 8: seqproxyapi.v1.SearchQuery
	(*AggQuery)(nil),                       // 9: seqproxyapi.v1.AggQuery
	(*HistQuery)(nil),                      // 10: seqproxyapi.v1.HistQuery
	(*ExplainEntry)(nil),                   // 11: seqproxyapi.v1.ExplainEntry
	(*SearchRequest)(nil),                  // 12: seqproxyapi.v1.SearchRequest
	(*ComplexSearchRequest)(nil),           // 13: seqproxyapi.v1.ComplexSearchRequest
	(*SearchResponse)(nil),                 // 14: seqproxyapi.v1.SearchResponse
	(*ComplexSearchResponse)(nil),          // 15: seqproxyapi.v1.ComplexSearchResponse
	(*StartAsyncSearchRequest)(nil),        // 16: seqproxyapi.v1.StartAsyncSearchRequest
	(*StartAsyncSearchResponse)(nil),       // 17: seqproxyapi.v1.StartAsyncSearchResponse
	(*FetchAsyncSearchResultRequest)(nil),  // 18: seqproxyapi.v1.FetchAsyncSearchResultRequest
	(*FetchAsyncSearchResultResponse)(nil), // 19: seqproxyapi.v1.FetchAsyncSearchResultResponse
	(*CancelAsyncSearchRequest)(nil),       // 20: seqproxyapi.v1.CancelAsyncSearchRequest
	(*CancelAsyncSearchResponse)(nil),      // 21: seqproxyapi.v1.CancelAsyncSearchResponse
	(*DeleteAsyncSearchRequest)(nil),       // 22: seqproxyapi.v1.DeleteAsyncSearchRequest
	(*DeleteAsyncSearchResponse)(nil),      // 23: seqproxyapi.v1.DeleteAsyncSearchResponse
	(*GetAsyncSearchesListRequest)(nil),    // 24: seqproxyapi.v1.GetAsyncSearchesListRequest
	(*GetAsyncSearchesListResponse)(nil),   // 25: seqproxyapi.v1.GetAsyncSearchesListResponse
	(*AsyncSearchesListItem)(nil),          // 26: seqproxyapi.v1.AsyncSearchesListItem
	(*GetAggregationRequest)(nil),          // 27: seqproxyapi.v1.GetAggregationRequest
	(*GetAggregationResponse)(nil),         // 28: seqproxyapi.v1.GetAggregationResponse
	(*GetHistogramRequest)(nil),            // 29: seqproxyapi.v1.GetHistogramRequest
	(*GetHistogramResponse)(nil),           // 30: seqproxyapi.v1.GetHistogramResponse
	(*FetchRequest)(nil),                   // 31: seqproxyapi.v1.FetchRequest
	(*MappingRequest)(nil),                 // 32: seqproxyapi.v1.MappingRequest
	(*MappingResponse)(nil),                // 33: seqproxyapi.v1.MappingResponse
	(*StatusRequest)(nil),                  // 34: seqproxyapi.v1.StatusRequest
	(*StatusResponse)(nil),                 // 35: seqproxyapi.v1.StatusResponse
	(*StoreStatus)(nil),                    // 36: seqproxyapi.v1.StoreStatus
	(*StoreStatusValues)(nil),              // 37: seqproxyapi.v1.StoreStatusValues
	(*ExportRequest)(nil),                  // 38: seqproxyapi.v1.ExportRequest
	(*ExportResponse)(nil),                 // 39: seqproxyapi.v1.ExportResponse
	(*Aggregation_Bucket)(nil),             // 40: seqproxyapi.v1.Aggregation.Bucket
	(*Histogram_Bucket)(nil),               // 41: seqproxyapi.v1.Histogram.Bucket
	(*FetchRequest_FieldsFilter)(nil),      // 42: seqproxyapi.v1.FetchRequest.FieldsFilter
	(*timestamppb.Timestamp)(nil),          // 43: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),            // 44: google.protobuf.Duration
}
var file_seqproxyapi_v1_seq_proxy_api_proto_depIdxs = []int32{
	0,  // 0: seqproxyapi.v1.Error.code:type_name -> seqproxyapi.v1.ErrorCode
	43, // 1: seqproxyapi.v1.Document.time:type_name -> google.protobuf.Timestamp
	40, // 2: seqproxyapi.v1.Aggregation.buckets:type_name -> seqproxyapi.v1.Aggregation.Bucket
	41, // 3: seqproxyapi.v1.Histogram.buckets:type_name -> seqproxyapi.v1.Histogram.Bucket
	43, // 4: seqproxyapi.v1.SearchQuery.from:type_name -> google.protobuf.Timestamp
	43, // 5: seqproxyapi.v1.SearchQuery.to:type_name -> google.protobuf.Timestamp
	1,  // 6: seqproxyapi.v1.AggQuery.func:type_name -> seqproxyapi.v1.AggFunc
	44, // 7: seqproxyapi.v1.ExplainEntry.duration:type_name -> google.protobuf.Duration
	11, // 8: seqproxyapi.v1.ExplainEntry.children:type_name -> seqproxyapi.v1.ExplainEntry
	8,  // 9: seqproxyapi.v1.SearchRequest.query:type_name -> seqproxyapi.v1.SearchQuery
	2,  // 10: seqproxyapi.v1.SearchRequest.order:type_name -> seqproxyapi.v1.Order
	8,  // 11: seqproxyapi.v1.ComplexSearchRequest.query:type_name -> seqproxyapi.v1.SearchQuery
	9,  // 12: seqproxyapi.v1.ComplexSearchRequest.aggs:type_name -> seqproxyapi.v1.AggQuery
	10, // 13: seqproxyapi.v1.ComplexSearchRequest.hist:type_name -> seqproxyapi.v1.HistQuery
	2,  // 14: seqproxyapi.v1.ComplexSearchRequest.order:type_name -> seqproxyapi.v1.Order
	5,  // 15: seqproxyapi.v1.SearchResponse.docs:type_name -> seqproxyapi.v1.Document
	4,  // 16: seqproxyapi.v1.SearchResponse.error:type_name -> seqproxyapi.v1.Error
	5,  // 17: seqproxyapi.v1.ComplexSearchResponse.docs:type_name -> seqproxyapi.v1.Document
	6,  // 18: seqproxyapi.v1.ComplexSearchResponse.aggs:type_name -> seqproxyapi.v1.Aggregation
	7,  // 19: seqproxyapi.v1.ComplexSearchResponse.hist:type_name -> seqproxyapi.v1.Histogram
	4,  // 20: seqproxyapi.v1.ComplexSearchResponse.error:type_name -> seqproxyapi.v1.Error
	11, // 21: seqproxyapi.v1.ComplexSearchResponse.explain:type_name -> seqproxyapi.v1.ExplainEntry
	44, // 22: seqproxyapi.v1.StartAsyncSearchRequest.retention:type_name -> google.protobuf.Duration
	8,  // 23: seqproxyapi.v1.StartAsyncSearchRequest.query:type_name -> seqproxyapi.v1.SearchQuery
	9,  // 24: seqproxyapi.v1.StartAsyncSearchRequest.aggs:type_name -> seqproxyapi.v1.AggQuery
	10, // 25: seqproxyapi.v1.StartAsyncSearchRequest.hist:type_name -> seqproxyapi.v1.HistQuery
	2,  // 26: seqproxyapi.v1.FetchAsyncSearchResultRequest.order:type_name -> seqproxyapi.v1.Order
	3,  // 27: seqproxyapi.v1.FetchAsyncSearchResultResponse.status:type_name -> seqproxyapi.v1.AsyncSearchStatus
	16, // 28: seqproxyapi.v1.FetchAsyncSearchResultResponse.request:type_name -> seqproxyapi.v1.StartAsyncSearchRequest
	15, // 29: seqproxyapi.v1.FetchAsyncSearchResultResponse.response:type_name -> seqproxyapi.v1.ComplexSearchResponse
	43, // 30: seqproxyapi.v1.FetchAsyncSearchResultResponse.started_at:type_name -> google.protobuf.Timestamp
	43, // 31: seqproxyapi.v1.FetchAsyncSearchResultResponse.expires_at:type_name -> google.protobuf.Timestamp
	43, // 32: seqproxyapi.v1.FetchAsyncSearchResultResponse.canceled_at:type_name -> google.protobuf.Timestamp
	3,  // 33: seqproxyapi.v1.GetAsyncSearchesListRequest.status:type_name -> seqproxyapi.v1.AsyncSearchStatus
	26, // 34: seqproxyapi.v1.GetAsyncSearchesListResponse.searches:type_name -> seqproxyapi.v1.AsyncSearchesListItem
	3,  // 35: seqproxyapi.v1.AsyncSearchesListItem.status:type_name -> seqproxyapi.v1.AsyncSearchStatus
	16, // 36: seqproxyapi.v1.AsyncSearchesListItem.request:type_name -> seqproxyapi.v1.StartAsyncSearchRequest
	43, // 37: seqproxyapi.v1.AsyncSearchesListItem.started_at:type_name -> google.protobuf.Timestamp
	43, // 38: seqproxyapi.v1.AsyncSearchesListItem.expires_at:type_name -> google.protobuf.Timestamp
	43, // 39: seqproxyapi.v1.AsyncSearchesListItem.canceled_at:type_name -> google.protobuf.Timestamp
	8,  // 40: seqproxyapi.v1.GetAggregationRequest.query:type_name -> seqproxyapi.v1.SearchQuery
	9,  // 41: seqproxyapi.v1.GetAggregationRequest.aggs:type_name -> seqproxyapi.v1.AggQuery
	6,  // 42: seqproxyapi.v1.GetAggregationResponse.aggs:type_name -> seqproxyapi.v1.Aggregation
	4,  // 43: seqproxyapi.v1.GetAggregationResponse.error:type_name -> seqproxyapi.v1.Error
	8,  // 44: seqproxyapi.v1.GetHistogramRequest.query:type_name -> seqproxyapi.v1.SearchQuery
	10, // 45: seqproxyapi.v1.GetHistogramRequest.hist:type_name -> seqproxyapi.v1.HistQuery
	7,  // 46: seqproxyapi.v1.GetHistogramResponse.hist:type_name -> seqproxyapi.v1.Histogram
	4,  // 47: seqproxyapi.v1.GetHistogramResponse.error:type_name -> seqproxyapi.v1.Error
	42, // 48: seqproxyapi.v1.FetchRequest.fields_filter:type_name -> seqproxyapi.v1.FetchRequest.FieldsFilter
	43, // 49: seqproxyapi.v1.StatusResponse.oldest_storage_time:type_name -> google.protobuf.Timestamp
	36, // 50: seqproxyapi.v1.StatusResponse.stores:type_name -> seqproxyapi.v1.StoreStatus
	37, // 51: seqproxyapi.v1.StoreStatus.values:type_name -> seqproxyapi.v1.StoreStatusValues
	43, // 52: seqproxyapi.v1.StoreStatusValues.oldest_time:type_name -> google.protobuf.Timestamp
	8,  // 53: seqproxyapi.v1.ExportRequest.query:type_name -> seqproxyapi.v1.SearchQuery
	5,  // 54: seqproxyapi.v1.ExportResponse.doc:type_name -> seqproxyapi.v1.Document
	43, // 55: seqproxyapi.v1.Aggregation.Bucket.ts:type_name -> google.protobuf.Timestamp
	43, // 56: seqproxyapi.v1.Histogram.Bucket.ts:type_name -> google.protobuf.Timestamp
	12, // 57: seqproxyapi.v1.SeqProxyApi.Search:input_type -> seqproxyapi.v1.SearchRequest
	13, // 58: seqproxyapi.v1.SeqProxyApi.ComplexSearch:input_type -> seqproxyapi.v1.ComplexSearchRequest
	27, // 59: seqproxyapi.v1.SeqProxyApi.GetAggregation:input_type -> seqproxyapi.v1.GetAggregationRequest
	29, // 60: seqproxyapi.v1.SeqProxyApi.GetHistogram:input_type -> seqproxyapi.v1.GetHistogramRequest
	31, // 61: seqproxyapi.v1.SeqProxyApi.Fetch:input_type -> seqproxyapi.v1.FetchRequest
	32, // 62: seqproxyapi.v1.SeqProxyApi.Mapping:input_type -> seqproxyapi.v1.MappingRequest
	34, // 63: seqproxyapi.v1.SeqProxyApi.Status:input_type -> seqproxyapi.v1.StatusRequest
	38, // 64: seqproxyapi.v1.SeqProxyApi.Export:input_type -> seqproxyapi.v1.ExportRequest
	16, // 65: seqproxyapi.v1.SeqProxyApi.StartAsyncSearch:input_type -> seqproxyapi.v1.StartAsyncSearchRequest
	18, // 66: seqproxyapi.v1.SeqProxyApi.FetchAsyncSearchResult:input_type -> seqproxyapi.v1.FetchAsyncSearchResultRequest
	20, // 67: seqproxyapi.v1.SeqProxyApi.CancelAsyncSearch:input_type -> seqproxyapi.v1.CancelAsyncSearchRequest
	22, // 68: seqproxyapi.v1.SeqProxyApi.DeleteAsyncSearch:input_type -> seqproxyapi.v1.DeleteAsyncSearchRequest
	24, // 69: seqproxyapi.v1.SeqProxyApi.GetAsyncSearchesList:input_type -> seqproxyapi.v1.GetAsyncSearchesListRequest
	14, // 70: seqproxyapi.v1.SeqProxyApi.Search:output_type -> seqproxyapi.v1.SearchResponse
	15, // 71: seqproxyapi.v1.SeqProxyApi.ComplexSearch:output_type -> seqproxyapi.v1.ComplexSearchResponse
	28, // 72: seqproxyapi.v1.SeqProxyApi.GetAggregation:output_type -> seqproxyapi.v1.GetAggregationResponse
	30, // 73: seqproxyapi.v1.SeqProxyApi.GetHistogram:output_type -> seqproxyapi.v1.GetHistogramResponse
	5,  // 74: seqproxyapi.v1.SeqProxyApi.Fetch:output_type -> seqproxyapi.v1.Document
	33, // 75: seqproxyapi.v1.SeqProxyApi.Mapping:output_type -> seqproxyapi.v1.MappingResponse
	35, // 76: seqproxyapi.v1.SeqProxyApi.Status:output_type -> seqproxyapi.v1.StatusResponse
	39, // 77: seqproxyapi.v1.SeqProxyApi.Export:output_type -> seqproxyapi.v1.ExportResponse
	17, // 78: seqproxyapi.v1.SeqProxyApi.StartAsyncSearch:output_type -> seqproxyapi.v1.StartAsyncSearchResponse
	19, // 79: seqproxyapi.v1.SeqProxyApi.FetchAsyncSearchResult:output_type -> seqproxyapi.v1.FetchAsyncSearchResultResponse
	21, // 80: seqproxyapi.v1.SeqProxyApi.CancelAsyncSearch:output_type -> seqproxyapi.v1.CancelAsyncSearchResponse
	23, // 81: seqproxyapi.v1.SeqProxyApi.DeleteAsyncSearch:output_type -> seqproxyapi.v1.DeleteAsyncSearchResponse
	25, // 82: seqproxyapi.v1.SeqProxyApi.GetAsyncSearchesList:output_type -> seqproxyapi.v1.GetAsyncSearchesListResponse
	70, // [70:83] is the sub-list for method output_type
	57, // [57:70] is the sub-list for method input_type
	57, // [57:57] is the sub-list for extension type_name
	57, // [57:57] is the sub-list for extension extendee
	0,  // [0:57] is the sub-list for field type_name
}

func init() { file_seqproxyapi_v1_seq_proxy_api_proto_init() }
func file_seqproxyapi_v1_seq_proxy_api_proto_init() {
	if File_seqproxyapi_v1_seq_proxy_api_proto != nil {
		return
	}
	file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[5].OneofWrappers = []any{}
	file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[9].OneofWrappers = []any{}
	file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[11].OneofWrappers = []any{}
	file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[12].OneofWrappers = []any{}
	file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[15].OneofWrappers = []any{}
	file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[20].OneofWrappers = []any{}
	file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[22].OneofWrappers = []any{}
	file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[31].OneofWrappers = []any{}
	file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[32].OneofWrappers = []any{}
	file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes[36].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_seqproxyapi_v1_seq_proxy_api_proto_rawDesc), len(file_seqproxyapi_v1_seq_proxy_api_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_seqproxyapi_v1_seq_proxy_api_proto_goTypes,
		DependencyIndexes: file_seqproxyapi_v1_seq_proxy_api_proto_depIdxs,
		EnumInfos:         file_seqproxyapi_v1_seq_proxy_api_proto_enumTypes,
		MessageInfos:      file_seqproxyapi_v1_seq_proxy_api_proto_msgTypes,
	}.Build()
	File_seqproxyapi_v1_seq_proxy_api_proto = out.File
	file_seqproxyapi_v1_seq_proxy_api_proto_goTypes = nil
	file_seqproxyapi_v1_seq_proxy_api_proto_depIdxs = nil
}
