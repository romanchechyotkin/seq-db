// Code generated by MockGen. DO NOT EDIT.
// Source: proxyapi/grpc_v1.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	metadata "google.golang.org/grpc/metadata"

	seqproxyapi "github.com/ozontech/seq-db/pkg/seqproxyapi/v1"
	search "github.com/ozontech/seq-db/proxy/search"
	querytracer "github.com/ozontech/seq-db/querytracer"
	seq "github.com/ozontech/seq-db/seq"
)

// MockSearchIngestor is a mock of SearchIngestor interface.
type MockSearchIngestor struct {
	ctrl     *gomock.Controller
	recorder *MockSearchIngestorMockRecorder
}

// MockSearchIngestorMockRecorder is the mock recorder for MockSearchIngestor.
type MockSearchIngestorMockRecorder struct {
	mock *MockSearchIngestor
}

// NewMockSearchIngestor creates a new mock instance.
func NewMockSearchIngestor(ctrl *gomock.Controller) *MockSearchIngestor {
	mock := &MockSearchIngestor{ctrl: ctrl}
	mock.recorder = &MockSearchIngestorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearchIngestor) EXPECT() *MockSearchIngestorMockRecorder {
	return m.recorder
}

// CancelAsyncSearch mocks base method.
func (m *MockSearchIngestor) CancelAsyncSearch(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelAsyncSearch", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelAsyncSearch indicates an expected call of CancelAsyncSearch.
func (mr *MockSearchIngestorMockRecorder) CancelAsyncSearch(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelAsyncSearch", reflect.TypeOf((*MockSearchIngestor)(nil).CancelAsyncSearch), ctx, id)
}

// DeleteAsyncSearch mocks base method.
func (m *MockSearchIngestor) DeleteAsyncSearch(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAsyncSearch", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAsyncSearch indicates an expected call of DeleteAsyncSearch.
func (mr *MockSearchIngestorMockRecorder) DeleteAsyncSearch(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAsyncSearch", reflect.TypeOf((*MockSearchIngestor)(nil).DeleteAsyncSearch), ctx, id)
}

// Documents mocks base method.
func (m *MockSearchIngestor) Documents(ctx context.Context, r search.FetchRequest) (search.DocsIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Documents", ctx, r)
	ret0, _ := ret[0].(search.DocsIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Documents indicates an expected call of Documents.
func (mr *MockSearchIngestorMockRecorder) Documents(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Documents", reflect.TypeOf((*MockSearchIngestor)(nil).Documents), ctx, r)
}

// FetchAsyncSearchResult mocks base method.
func (m *MockSearchIngestor) FetchAsyncSearchResult(arg0 context.Context, arg1 search.FetchAsyncSearchResultRequest) (search.FetchAsyncSearchResultResponse, search.DocsIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAsyncSearchResult", arg0, arg1)
	ret0, _ := ret[0].(search.FetchAsyncSearchResultResponse)
	ret1, _ := ret[1].(search.DocsIterator)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchAsyncSearchResult indicates an expected call of FetchAsyncSearchResult.
func (mr *MockSearchIngestorMockRecorder) FetchAsyncSearchResult(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAsyncSearchResult", reflect.TypeOf((*MockSearchIngestor)(nil).FetchAsyncSearchResult), arg0, arg1)
}

// GetAsyncSearchesList mocks base method.
func (m *MockSearchIngestor) GetAsyncSearchesList(arg0 context.Context, arg1 search.GetAsyncSearchesListRequest) ([]*search.AsyncSearchesListItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAsyncSearchesList", arg0, arg1)
	ret0, _ := ret[0].([]*search.AsyncSearchesListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAsyncSearchesList indicates an expected call of GetAsyncSearchesList.
func (mr *MockSearchIngestorMockRecorder) GetAsyncSearchesList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAsyncSearchesList", reflect.TypeOf((*MockSearchIngestor)(nil).GetAsyncSearchesList), arg0, arg1)
}

// Search mocks base method.
func (m *MockSearchIngestor) Search(ctx context.Context, sr *search.SearchRequest, tr *querytracer.Tracer) (*seq.QPR, search.DocsIterator, time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, sr, tr)
	ret0, _ := ret[0].(*seq.QPR)
	ret1, _ := ret[1].(search.DocsIterator)
	ret2, _ := ret[2].(time.Duration)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Search indicates an expected call of Search.
func (mr *MockSearchIngestorMockRecorder) Search(ctx, sr, tr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockSearchIngestor)(nil).Search), ctx, sr, tr)
}

// StartAsyncSearch mocks base method.
func (m *MockSearchIngestor) StartAsyncSearch(arg0 context.Context, arg1 search.AsyncRequest) (search.AsyncResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartAsyncSearch", arg0, arg1)
	ret0, _ := ret[0].(search.AsyncResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartAsyncSearch indicates an expected call of StartAsyncSearch.
func (mr *MockSearchIngestorMockRecorder) StartAsyncSearch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAsyncSearch", reflect.TypeOf((*MockSearchIngestor)(nil).StartAsyncSearch), arg0, arg1)
}

// Status mocks base method.
func (m *MockSearchIngestor) Status(ctx context.Context) *search.IngestorStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", ctx)
	ret0, _ := ret[0].(*search.IngestorStatus)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockSearchIngestorMockRecorder) Status(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockSearchIngestor)(nil).Status), ctx)
}

// MockMappingProvider is a mock of MappingProvider interface.
type MockMappingProvider struct {
	ctrl     *gomock.Controller
	recorder *MockMappingProviderMockRecorder
}

// MockMappingProviderMockRecorder is the mock recorder for MockMappingProvider.
type MockMappingProviderMockRecorder struct {
	mock *MockMappingProvider
}

// NewMockMappingProvider creates a new mock instance.
func NewMockMappingProvider(ctrl *gomock.Controller) *MockMappingProvider {
	mock := &MockMappingProvider{ctrl: ctrl}
	mock.recorder = &MockMappingProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMappingProvider) EXPECT() *MockMappingProviderMockRecorder {
	return m.recorder
}

// GetRawMapping mocks base method.
func (m *MockMappingProvider) GetRawMapping() *seq.RawMapping {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawMapping")
	ret0, _ := ret[0].(*seq.RawMapping)
	return ret0
}

// GetRawMapping indicates an expected call of GetRawMapping.
func (mr *MockMappingProviderMockRecorder) GetRawMapping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawMapping", reflect.TypeOf((*MockMappingProvider)(nil).GetRawMapping))
}

// MockRateLimiter is a mock of RateLimiter interface.
type MockRateLimiter struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimiterMockRecorder
}

// MockRateLimiterMockRecorder is the mock recorder for MockRateLimiter.
type MockRateLimiterMockRecorder struct {
	mock *MockRateLimiter
}

// NewMockRateLimiter creates a new mock instance.
func NewMockRateLimiter(ctrl *gomock.Controller) *MockRateLimiter {
	mock := &MockRateLimiter{ctrl: ctrl}
	mock.recorder = &MockRateLimiterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimiter) EXPECT() *MockRateLimiterMockRecorder {
	return m.recorder
}

// Account mocks base method.
func (m *MockRateLimiter) Account(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Account", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Account indicates an expected call of Account.
func (mr *MockRateLimiterMockRecorder) Account(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Account", reflect.TypeOf((*MockRateLimiter)(nil).Account), arg0)
}

// MockExportServer is a mock of ExportServer interface.
type MockExportServer struct {
	ctrl     *gomock.Controller
	recorder *MockExportServerMockRecorder
}

// MockExportServerMockRecorder is the mock recorder for MockExportServer.
type MockExportServerMockRecorder struct {
	mock *MockExportServer
}

// NewMockExportServer creates a new mock instance.
func NewMockExportServer(ctrl *gomock.Controller) *MockExportServer {
	mock := &MockExportServer{ctrl: ctrl}
	mock.recorder = &MockExportServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExportServer) EXPECT() *MockExportServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockExportServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockExportServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockExportServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockExportServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockExportServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockExportServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockExportServer) Send(arg0 *seqproxyapi.ExportResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockExportServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockExportServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockExportServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockExportServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockExportServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockExportServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockExportServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockExportServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockExportServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockExportServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockExportServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockExportServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockExportServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockExportServer)(nil).SetTrailer), arg0)
}

// MockFetchServer is a mock of FetchServer interface.
type MockFetchServer struct {
	ctrl     *gomock.Controller
	recorder *MockFetchServerMockRecorder
}

// MockFetchServerMockRecorder is the mock recorder for MockFetchServer.
type MockFetchServerMockRecorder struct {
	mock *MockFetchServer
}

// NewMockFetchServer creates a new mock instance.
func NewMockFetchServer(ctrl *gomock.Controller) *MockFetchServer {
	mock := &MockFetchServer{ctrl: ctrl}
	mock.recorder = &MockFetchServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFetchServer) EXPECT() *MockFetchServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockFetchServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockFetchServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFetchServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockFetchServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockFetchServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockFetchServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockFetchServer) Send(arg0 *seqproxyapi.Document) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockFetchServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockFetchServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockFetchServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockFetchServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockFetchServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockFetchServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockFetchServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockFetchServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockFetchServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockFetchServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockFetchServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockFetchServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockFetchServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockFetchServer)(nil).SetTrailer), arg0)
}
